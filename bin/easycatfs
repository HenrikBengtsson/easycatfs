#! /usr/bin/env bash
### easycatfs
### 
### Usage:
###  easycatfs <command> [options] <targets>
### 
### Commands:
###  mount        Mount target locally as read-only
###  unmount      Unmount locally mounted target
###  mounts       List currently mounted targets
###  cache-size   Total size of local cache for targets (in bytes)
###  config       Output configuration
###
### Options:
###  --help       Display the full help page with examples
###  --version    Output version of this software
###  --debug      Output detailed debug information
###  --verbose    Output informative message
###  --all        Apply command to all mounted targets
###  --full       More details when listing mounts
###
### where <targets> is one or more existing target folders.
### ---
###
### Example:
###  easycatfs --help
###  easycatfs --version
###
###  easycatfs config
###  easycatfs mount "$HOME/R"
###  easycatfs mount "$HOME/.config"
###  easycatfs mount "$HOME/.config" "$HOME/R"
###  easycatfs cache-size "$HOME/.config" "$HOME/R"
###  easycatfs cache-size --all
###  easycatfs mounts
###  easycatfs unmount "$HOME/R"
###  easycatfs unmount "$HOME/.config" "$HOME/R"
###  easycatfs unmount --all
###
###  r_mount=$(easycatfs mount "$HOME/R")
###  export R_LIBS_USER=${r_mount}/%p-library/%v
###
### Environment variables:
###
###  EASYCATFS_ROOT:
###    The path where to mount folders (default: $SCRATCHDIR,
###    then $TMPDIR, then /tmp/$USER)
###
### Requirements:
###
###  * Linux file system (local and remote)
###  * Bash
###  * catfs (https://github.com/kahing/catfs)
###
### Version: 0.1.3-9000
### Copyright: Henrik Bengtsson (2021)
### License: MIT

## Import bash utility functions
incl="${BASH_SOURCE%/*}/incl"

# shellcheck source=incl/asserts.sh
source "${incl}/asserts.sh"
# shellcheck source=incl/cli.sh
source "${incl}/cli.sh"
# shellcheck source=incl/conditions.sh
source "${incl}/conditions.sh"
# shellcheck source=incl/files.sh
source "${incl}/files.sh"
# shellcheck source=incl/output.sh
source "${incl}/output.sh"



# -------------------------------------------------------------------------
# catfs functions
# -------------------------------------------------------------------------
function catfs_scratch_root {
    local scratch_dir

    scratch_dir=${EASYCATFS_ROOT:-${SCRATCHDIR:-${TMPDIR}}}
    mdebug "scratch_dir=${scratch_dir}"
    
    if [[ -z "${scratch_dir}" ]]; then
        scratch_dir=/tmp/${USER}
        make_dir "${scratch_dir}"
    else
        assert_dir_exists "${scratch_dir}"

        ## Make user specific, unless already is
        if [[ $(basename "${scratch_dir}") != "${USER}" ]]; then
            scratch_dir=${scratch_dir}/${USER}
            mdebug "scratch_dir=${scratch_dir} (appended \${USER})"
            make_dir "${scratch_dir}"
        fi
    fi

    ## Make unique to the calling process (= the parent process)
    scratch_dir=${scratch_dir}/ppid=${PPID}
    mdebug "scratch_dir=${scratch_dir} (appended ppid=\${PPID})"
    
    echo "${scratch_dir}"
}

function catfs_cache_size {
    local target
    local path
    local size
    local sizes
    local ss
    
    target=$1
    mdebug "target: ${target}"
    
    path=$(catfs_target_db_dir "${target}")
    mdebug "cache path: ${path}"
    
    size=0
    if [[ -d "${path}" ]]; then
        size=$(du --one-file-system --summarize --apparent-size --block-size=1 "${target}" | cut -f 1)
    fi
    mdebug "cache size: ${size} bytes"
    
    echo "${size}"
}

function catfs_target_db_dir {
    local scratch_dir
    local cache_root
    local md5
    local path
    local target

    target=$1
    
    scratch_dir=$(catfs_scratch_root)
    cache_root=${scratch_dir}/.easycatfs
    mdebug "catfs cache root: ${cache_root}"
    make_dir "${cache_root}"

    md5=$(md5sum <<< "${target}" | cut -f 1 -d ' ')
    mdebug "md5: ${md5}"

    path=${cache_root}/${md5}
    mdebug "mounts_db_dir: ${path}"

    echo "${path}"
}

function find_catfs {
    local bin
    
    bin=$(which catfs) || error "No such tool: catfs"
    assert_file_executable "${bin}"
    mdebug "catfs: ${bin}"
    echo "${bin}"
}

function catfs_version {
    local bin
    local version
    
    bin=$(find_catfs)
    version=$("${bin}" --version | sed -E 's/^catfs +//g')
    
    ## SPECIAL CASE: Develop version based of 0.8.0?
    if [[ "${version}" == 0.8.0 ]]; then
	catfs --help | grep -q -F 'uid' && version=${version}-9000
    fi
    mdebug "catfs version: ${version}"
    echo "${version}"
}

function is_mounted {
    mountpoint -q "$1"
}

function catfs_wait_for_mount {
    mdebug "Waiting for mount point to become available ..."
    while ! is_mounted "$1"; do
        mdebug "Polling mount point (every 0.1 seconds)"
	sleep 0.1
    done
    mdebug "Mount point is available"
}

function catfs_mount {
    local bin
    local target_path
    local scratch_dir
    local mounts_db_dir
    local cache_path
    local mount_path
    local pid
    local pid_file
    local target_file

    target_path=$1
    assert_dir_exists "${target_path}"
    
    bin=$(find_catfs)
    
    scratch_dir=$(catfs_scratch_root)
    mounts_db_dir=$(catfs_target_db_dir "${target_path}")

    ## Already mounted?
    if [[ -d "${mounts_db_dir}" ]]; then
        merror "Already mounted: ${target_path} [${mounts_db_dir} exists]"
    elif is_mounted "${target_path}"; then
        merror "Already mounted: ${target_path} [mountpoint says so]"
    fi

    make_dir "${mounts_db_dir}"
    
    mount_path=${scratch_dir}/${target_path}
    mount_path=${mount_path/\/\//\/}
    mdebug "mount_path: ${mount_path}"
    make_dir "${mount_path}"

    cache_path=$(mktemp --directory --tmpdir="${mounts_db_dir}")
    mdebug "catfs cache path: ${cache_path}"
    assert_dir_exists "${cache_path}"

    ## Note, we need to redirect stdout for the subshell running in the
    ## background, otherwise mount_path=$(easycatfs <path>) will block
    opts=()

    ## Force in foreground?
    [[ "$(catfs_version)" == 0.8.0-9* ]] && opts+=(-f)
    mdebug "catfs extra options: [n=${#opts[@]}] ${opts[*]}"    
    "${bin}" "${target_path}" "${cache_path}" "${mount_path}" -o ro "${opts[@]}" > /dev/null 2> "${mounts_db_dir}/catfs.log" &
    pid=$!
    mdebug "catfs PID: ${pid}"

    pid_file="${mounts_db_dir}/pid"
    mdebug "pid_file: ${pid_file}"
    echo "${pid}" > "${pid_file}"

    target_file="${mounts_db_dir}/target"
    mdebug "target_file: ${target_file}"
    echo "${target_path}" > "${target_file}"

    minfo "Mounted '${mount_path}' as read-only to '${target_path}'"
    minfo "To unmount, call: easycatfs unmount \"${target_path}\""

    ## It looks like catfs takes ~0.1 seconds to complete the mount
    ## Let's wait for mount to become active.
    catfs_wait_for_mount "${mount_path}"
    
    echo "${mount_path}"
}


function catfs_mounts {
    typeset -i pid
    local target_path
    local scratch_dir
    local cache_root
    local dirs
    local pid
    local pid_file
    local target_file
    local target_path
    local mount_path
    local md5
    
    scratch_dir=$(catfs_scratch_root)

    cache_root=${scratch_dir}/.easycatfs
    make_dir "${cache_root}"

    mapfile -t dirs < <(find "${cache_root}" -mindepth 1 -maxdepth 2 -type f -name target -exec dirname {} \;)
    for dir in "${dirs[@]}"; do
        mdebug "dir: ${dir}"
        
        pid_file="${dir}/pid"
        mdebug "pid_file: ${pid_file}"
        pid=$(cat "${pid_file}")
        mdebug "catfs PID on file: ${pid}"
        
        target_file="${dir}/target"
        mdebug "target_file: ${target_file}"
        target_path=$(cat "${target_file}")
        mdebug "Target path on file: ${target_path}"

        mount_path=${scratch_dir}/${target_path}
        mount_path=${mount_path/\/\//\/}

        md5=$(basename "${dir}")

        if [[ "$1" == "--full" ]]; then
            printf "%s -> %s (md5=%s pid=%d)\n" "${mount_path}" "${target_path}" "${md5}" "${pid}"
        else
            echo "${target_path}"
        fi
    done
}


function catfs_unmount {
    typeset -i pid
    local target_path
    local scratch_dir
    local mounts_db_dir
    local mount_path
    local pid
    local pid_file
    
    target_path=$1
    assert_dir_exists "${target_path}"
    
    scratch_dir=$(catfs_scratch_root)
    mounts_db_dir=$(catfs_target_db_dir "${target_path}")

    mount_path=${scratch_dir}/${target_path}
    mount_path=${mount_path/\/\//\/}
    mdebug "mount_path: ${mount_path}"

    ## Not mounted?
    if [[ ! -d "${mounts_db_dir}" ]]; then
        merror "Not mounted: ${target_path} [${mounts_db_dir} does not exists]"
    elif ! is_mounted "${mount_path}"; then
        merror "Not mounted: ${target_path} [mountpoint says so]"
    fi

    pid_file="${mounts_db_dir}/pid"
    assert_file_exists "${pid_file}"

    pid=$(cat "${pid_file}")
    mdebug "catfs PID on file: ${pid}"

    ## Signal to catfs process for this mount to terminate
    kill "${pid}" || error "Failed to terminate 'catfs' process with ${pid}"
    
    ## Wait for catfs process to finish
    tail --pid="${pid}" -f /dev/null
    
    minfo "Unmounted \"${mount_path}\" -> \"${target_path}\""
    
    remove_dir "${mounts_db_dir}"
    remove_dir "${mount_path}"
}


# -------------------------------------------------------------------------
# MAIN
# -------------------------------------------------------------------------
## Actions
action=
dryrun=false
force=false
verbose=false
args=()
full=false
all=false

# Parse command-line options
while [[ $# -gt 0 ]]; do
    mdebug "Next CLI argument: $1"
    ## Commands:
    if [[ "$1" == "config" ]]; then
        action="$1"
    elif [[ "$1" == "mount" ]]; then
        action="$1"
    elif [[ "$1" == "mounts" ]]; then
        action="$1"
    elif [[ "$1" == "unmount" ]]; then
        action="$1"
    elif [[ "$1" == "cache-size" ]]; then
        action="$1"

    ## Options (--flags):
    elif [[ "$1" == "--help" ]]; then
        action=help
    elif [[ "$1" == "--version" ]]; then
        action=version
    elif [[ "$1" == "--debug" ]]; then
        debug=true
    elif [[ "$1" == "--dry-run" ]]; then
        dryrun=true
    elif [[ "$1" == "--verbose" ]]; then
        verbose_level=1
    elif [[ "$1" == "--all" ]]; then
        all=true
    elif [[ "$1" == "--full" ]]; then
        full=true
    
    ## Options (--key=value):
    elif [[ "$1" =~ ^--.*=.*$ ]]; then
        key=${1//--}
        key=${key//=*}
        value=${1//--[[:alpha:]]*=}
        mdebug "Key-value option '$1' parsed to key='$key', value='$value'"
        if [[ -z $value ]]; then
            merror "Option '--$key' must not be empty"
        fi
        if [[ "$key" == "verbose" ]]; then
            verbose_level=$value
        else
            merror "Unknown option: $1"
        fi
    ## Additional options to be appended (rarely needed)
    else
        args+=("$1")
    fi
    shift
done

## --help should always be available prior to any validation errors
if [[ -z $action ]]; then
    help
    _exit 0
elif [[ $action == "help" ]]; then
    help full
    _exit 0
elif [[ $action == "version" ]]; then
    version
    $full && catfs_version
    _exit 0
fi


# -------------------------------------------------------------------------
# Validate options
# -------------------------------------------------------------------------


# -------------------------------------------------------------------------
# Initiate
# -------------------------------------------------------------------------
mdebug "action: ${action}"
mdebug "debug: ${debug}"
mdebug "verbose: ${verbose}"
mdebug "verbose_level: ${verbose_level}"
mdebug "dryrun: ${dryrun}"
mdebug "force: ${force}"
mdebug "path: ${path}"
mdebug "args: [n=${#args[@]}] ${args[*]}"


# -------------------------------------------------------------------------
# Actions
# -------------------------------------------------------------------------
if [[ ${action} == "cache-size" ]]; then
    targets=("${args[@]}")
    if [[ "${#targets[@]}" -eq 0 ]]; then
       if $all; then
           mapfile -t targets < <(catfs_mounts)
       else
           error "Missing target path argument"
       fi
    fi     
    mdebug "Targets: [n=${#targets[@]}] ${targets[*]}"
    sizes=()
    for target in "${targets[@]}"; do
        sizes+=("$(catfs_cache_size "${target}")")
    done
    mdebug "cache sizes: (${sizes[*]}) bytes"
    size=
    for ss in "${sizes[@]}"; do
        size=$(( size + "${ss}" ))
    done
    mdebug "Total cache size: ${size} bytes"
    echo "${size}"
elif [[ ${action} == "config" ]]; then
    printf "mount_root=%s\n" "$(catfs_scratch_root)"
elif [[ ${action} == "mount" ]]; then
    targets=("${args[@]}")
    if [[ "${#targets[@]}" -eq 0 ]]; then
       if $all; then
           mapfile -t targets < <(catfs_mounts)
       else
           error "Missing target path argument"
       fi
    fi     
    mdebug "Targets: [n=${#targets[@]}] ${targets[*]}"
    for target in "${targets[@]}"; do
        mdebug "catfs_unmount \"${target}\" ..."
        catfs_mount "${target}"
        mdebug "catfs_unmount \"${target}\" ... done"
    done
elif [[ ${action} == "unmount" ]]; then
    targets=("${args[@]}")
    if [[ "${#targets[@]}" -eq 0 ]]; then
       if $all; then
           mapfile -t targets < <(catfs_mounts)
       else
           error "Missing target path argument"
       fi
    fi     
    mdebug "Targets: [n=${#targets[@]}] ${targets[*]}"
    for target in "${targets[@]}"; do
        mdebug "catfs_unmount \"${target}\" ..."
        catfs_unmount "${target}"
        mdebug "catfs_unmount \"${target}\" ... done"
    done
elif [[ ${action} == "mounts" ]]; then
    opts=()
    if $full; then
        opts+=("--full")
    fi
    # shellcheck disable=SC2086
    catfs_mounts "${opts[@]}"
else
    error "Unknown action: ${action}"
fi
